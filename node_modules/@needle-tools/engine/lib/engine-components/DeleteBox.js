import { syncDestroy } from "../engine/engine_networking_instantiate.js";
import { getParam } from "../engine/engine_utils.js";
import { BoxHelperComponent } from "./BoxHelperComponent.js";
import { Behaviour, GameObject } from "./Component.js";
import { UsageMarker } from "./Interactable.js";
const debug = getParam("debugdeletable");
export class DeleteBox extends BoxHelperComponent {
}
export class Deletable extends Behaviour {
    deleteBoxes = [];
    awake() {
        this.deleteBoxes = GameObject.findObjectsOfType(DeleteBox, this.context);
    }
    update() {
        for (const box of this.deleteBoxes) {
            const obj = this.gameObject;
            const res = box.isInBox(obj);
            if (res === true) {
                const marker = GameObject.getComponentInParent(this.gameObject, UsageMarker);
                if (!marker) {
                    if (debug)
                        console.log("DESTROY", this.gameObject);
                    syncDestroy(this.gameObject, this.context.connection);
                }
                else if (debug)
                    console.warn("Can not delete object with usage marker", this.guid, marker);
            }
        }
    }
}
//# sourceMappingURL=DeleteBox.js.map