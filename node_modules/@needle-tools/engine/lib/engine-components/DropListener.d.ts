import { Object3D, Vector3 } from "three";
import { Behaviour } from "./Component.js";
import { EventList } from "./EventList.js";
export declare enum DropListenerEvents {
    /**
     * Dispatched when a file is dropped into the scene. The detail of the event is the file that was dropped.
     */
    FileDropped = "file-dropped",
    /**
     * Dispatched when a new object is added to the scene. The detail of the event is the glTF that was added.
     */
    ObjectAdded = "object-added"
}
/** The DropListener component is used to listen for drag and drop events in the browser and add the dropped files to the scene
 * It can be used to allow users to drag and drop glTF files into the scene to add new objects.
 *
 * ## Events
 * - **object-added** - dispatched when a new object is added to the scene
 * - **file-dropped** - dispatched when a file is dropped into the scene
 *
 * @example
 * ```typescript
 * import { DropListener, DropListenerEvents } from "@needle-tools/engine";
 *
 * const dropListener = new DropListener();
 *
 * gameObject.addComponent(dropListener);
 * dropListener.on(DropListenerEvents.FileDropped, (evt) => {
 *   console.log("File dropped", evt.detail);
 *   const file = evt.detail as File;
 * });
 *
 * dropListener.on(DropListenerEvents.ObjectAdded, (evt) => {
 *    console.log("Object added", evt.detail);
 *    const gltf = evt.detail as GLTF;
 * });
 * ```
 */
export declare class DropListener extends Behaviour {
    /**
     * When assigned the Droplistener will only accept files that are dropped on this object.
     */
    dropArea?: Object3D;
    /**
     * When enabled the object will be fitted into a volume. Use {@link fitVolumeSize} to specify the volume size.
     * @default false
     */
    fitIntoVolume: boolean;
    /**
     * The volume size will be used to fit the object into the volume. Use {@link fitIntoVolume} to enable this feature.
     */
    fitVolumeSize: Vector3;
    /** When enabled the object will be placed at the drop position (under the cursor)
     * @default true
     */
    placeAtHitPosition: boolean;
    onDropped: EventList;
    /** @internal */
    onEnable(): void;
    /** @internal */
    onDisable(): void;
    private onNetworkEvent;
    private handlePaste;
    private onDrag;
    private onDrop;
    private addFromUrl;
    private addFiles;
    /** Previously added objects */
    private readonly _addedObjects;
    private addObject;
    private testIfIsInDropArea;
}
