import { BufferGeometry, Material, Mesh, MeshBasicMaterial, Texture } from "three";
import { RGBAColor } from "../engine/js-extensions/index.js";
import { Behaviour } from "./Component.js";
export declare enum SpriteDrawMode {
    Simple = 0,
    Sliced = 1,
    Tiled = 2
}
declare class Vec2 {
    x: number;
    y: number;
}
/**
 * A sprite is a mesh that represents a 2D image
 */
export declare class Sprite {
    guid?: string;
    texture?: Texture;
    triangles: Array<number>;
    uv: Array<Vec2>;
    vertices: Array<Vec2>;
    /** @internal */
    __cached_geometry?: BufferGeometry;
    /**
     * The mesh that represents the sprite
     */
    get mesh(): Mesh;
    private _mesh;
    /**
     * The material used to render the sprite
     */
    get material(): MeshBasicMaterial;
    private _material;
    /**
     * The geometry of the sprite that can be used to create a mesh
     */
    getGeometry(): BufferGeometry<import("three").NormalBufferAttributes>;
}
export declare class SpriteSheet {
    sprites: Sprite[];
}
export declare class SpriteData {
    spriteSheet?: SpriteSheet;
    index: number;
    update(material: Material | undefined): void;
}
/**
 * The sprite renderer renders a sprite on a GameObject using an assigned spritesheet ({@link SpriteData})
 */
export declare class SpriteRenderer extends Behaviour {
    /** @internal The draw mode of the sprite renderer */
    drawMode: SpriteDrawMode;
    /** @internal Used when drawMode is set to Tiled */
    size: Vec2;
    color?: RGBAColor;
    /**
     * The material that is used to render the sprite
     */
    sharedMaterial?: Material;
    transparent: boolean;
    cutoutThreshold: number;
    castShadows: boolean;
    renderOrder: number;
    toneMapped: boolean;
    get sprite(): SpriteData | undefined;
    /**
     * Set a new sprite sheetsheet or update the index of the sprite to be rendered in the currently assigned sprite sheet
     */
    set sprite(value: SpriteData | undefined | number);
    /**
     * Set the index of the sprite to be rendered in the currently assigned sprite sheet
     */
    set spriteIndex(value: number);
    get spriteIndex(): number;
    /**
     * Get the number of sprites in the currently assigned sprite sheet
     */
    get spriteFrames(): number;
    private _spriteSheet?;
    private _currentSprite?;
    /** @internal */
    awake(): void;
    /** @internal */
    start(): void;
    /**
     * Update the sprite. Modified properties will be applied to the sprite mesh. This method is called automatically when the sprite is changed.
     */
    updateSprite(force?: boolean): void;
}
export {};
