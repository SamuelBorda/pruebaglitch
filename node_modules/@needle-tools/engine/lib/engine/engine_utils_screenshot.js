import { Color, PerspectiveCamera } from "three";
import { Renderer } from "../engine-components/Renderer.js";
import { getComponentsInChildren } from "./engine_components.js";
import { ContextRegistry } from "./engine_context_registry.js";
/**
 * Take a screenshot from the current scene.
 * **NOTE**: Use {@link screenshot2} for more options.
 *
 * @param context The context to take the screenshot from
 * @param width The width of the screenshot
 * @param height The height of the screenshot
 * @param mimeType The mime type of the image
 * @param camera The camera to use for the screenshot
 * @returns The data url of the screenshot. Returns null if the screenshot could not be taken.
 * @example
 * ```ts
 * const dataUrl = screenshot();
 * saveImage(dataUrl, "screenshot.png");
 * ```
 */
export function screenshot(context, width, height, mimeType = "image/webp", camera) {
    return screenshot2({ context, width, height, mimeType, camera });
}
/**
 * Take a screenshot from the current scene.
 * @param {ScreenshotOptions} opts
 * @returns The data url of the screenshot. Returns null if the screenshot could not be taken.
 * ```ts
 * const res = screenshot2({
 *    width: 1024,
 *   height: 1024,
 *  mimeType: "image/webp",
 * transparent: true,
 * })
 * // use saveImage to download the image
 * saveImage(res, "screenshot.webp");
 * ```
 */
export function screenshot2(opts = {
    mimeType: "image/png",
    transparent: false,
}) {
    if (!opts)
        opts = {};
    let { context, width, height, camera } = opts;
    const { mimeType } = opts;
    if (!context) {
        context = ContextRegistry.Current;
        if (!context) {
            console.error("Can not save screenshot: No needle-engine context found or provided.");
            return null;
        }
    }
    if (!camera) {
        camera = context.mainCamera;
        if (!camera) {
            console.error("No camera found");
            return null;
        }
    }
    const prevWidth = context.renderer.domElement.width;
    const prevHeight = context.renderer.domElement.height;
    if (!width)
        width = prevWidth;
    if (!height)
        height = prevHeight;
    // apply page zoom
    const zoomLevel = window.devicePixelRatio || 1;
    width /= zoomLevel;
    height /= zoomLevel;
    // reset style during screenshot
    context.renderer.domElement.style.width = width + "px";
    context.renderer.domElement.style.height = height + "px";
    const previousClearColor = context.renderer.getClearColor(new Color());
    const previousClearAlpha = context.renderer.getClearAlpha();
    try {
        if (opts?.transparent) {
            context.renderer.setClearColor(0x000000, 0);
        }
        const canvas = context.renderer.domElement;
        // set the desired output size
        context.renderer.setSize(width, height, false);
        // update the camera aspect and matrix
        if (camera instanceof PerspectiveCamera)
            context.updateAspect(camera, width, height);
        // Calling onBeforeRender to update objects with reflection probes. https://linear.app/needle/issue/NE-5112
        const callRenderEvents = opts.render_events !== false;
        const renderers = new Array();
        if (callRenderEvents) {
            getComponentsInChildren(context.scene, Renderer, renderers);
            renderers.forEach(r => r?.onBeforeRender());
        }
        // render now
        context.renderNow();
        if (callRenderEvents)
            renderers.forEach(r => r.onAfterRender());
        const dataUrl = canvas.toDataURL(mimeType);
        if (opts.download_filename) {
            saveImage(dataUrl, opts.download_filename);
        }
        return dataUrl;
    }
    finally {
        context.renderer.setSize(prevWidth, prevHeight, false);
        context.updateSize();
        context.renderer.setClearColor(previousClearColor, previousClearAlpha);
    }
    return null;
}
let saveImageElement = null;
/** Download a image (must be a data url).
 * @param dataUrl The data url of the image
 * @param filename The filename of the image
 * @example
 * ```ts
 * const dataUrl = screenshot();
 * saveImage(dataUrl, "screenshot.png");
 * ```
 */
export function saveImage(dataUrl, filename) {
    if (!dataUrl) {
        return;
    }
    if (!dataUrl.startsWith("data:image")) {
        console.error("Can not save image: Data url is not an image", dataUrl);
        return;
    }
    if (!saveImageElement) {
        saveImageElement = document.createElement("a");
    }
    saveImageElement.href = dataUrl;
    saveImageElement.download = filename;
    saveImageElement.click();
}
//# sourceMappingURL=engine_utils_screenshot.js.map