const { getMeta } = require("./config.cjs");
const https = require('https');


/**
 * @param {string} code
 * @param {string | null | undefined} licenseType
 */
module.exports.replaceLicense = async function (code, licenseType) {

    if (!licenseType) {
        const meta = getMeta();
        if (meta) {
            licenseType = meta.license;
        }
    }

    if (typeof licenseType === "object") {
        licenseType = await module.exports.resolveLicense(licenseType);
    }

    if (!licenseType) {
        return code;
    }

    const index = code.indexOf("NEEDLE_ENGINE_LICENSE_TYPE");
    if (index >= 0) {
        const end = code.indexOf(";", index);
        if (end >= 0) {
            const line = code.substring(index, end);
            const replaced = "NEEDLE_ENGINE_LICENSE_TYPE = \"" + licenseType + "\"";
            code = code.replace(line, replaced);
            return code;
        }
    }
}





const LICENSE_ENDPOINT = `https://urls.needle.tools/license-endpoint`

/**
 * Resolve the license for a given license key (e.g. invoice id) and id (e.g. email that was used for the purchase)
 * @param {import('../types/license.js').License} license
 * @returns {Promise<string | null>}
 */
module.exports.resolveLicense = async function (license) {
    if (typeof license !== "object") {
        return license;
    }

    if (!license) {
        return null;
    }

    if (!license.key) {
        console.warn("WARN: License key is missing.");
        return null;
    }
    else if (!license.id) {
        console.warn("WARN: License id is missing.");
        return null;
    }

    console.log("INFO: Resolve license for " + obscure(license.id + "::" + license.key));
    const url = await fetch(LICENSE_ENDPOINT, { method: "GET" }).catch(console.error);
    if (!url) {
        console.warn("WARN: Failed to fetch license URL from endpoint");
        return null;
    }
    const licenseRequestUrl = `${url}?email=${license.id}&key=${license.key}&version=2`;
    const licenseResponse = await fetch(licenseRequestUrl, { method: "GET" }).catch(console.error);
    if (!licenseResponse) {
        console.warn("WARN: Failed to fetch license");
        return null;
    }
    /** @type {{license:string}} */
    const licenseJson = JSON.parse(licenseResponse);
    console.log("\n");
    if (licenseJson.license) {
        console.log(`INFO: Successfully received \"${licenseJson.license?.toUpperCase()}\" license`)
        return licenseJson.license;
    }
    console.warn("WARN: Received invalid license.");
    return null;
}


/**
 * @param {string} str
 */
function obscure(str) {
    const start = str.substring(0, 3);
    const end = str.substring(str.length - 3);
    return start + "***" + end;
}


// NODE 16 doesn't support fetch yet
function fetch(url, options) {
    return new Promise((resolve, reject) => {
        https.get(url, options, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                resolve(data);
            });
        }).on("error", (err) => {
            reject(err);
        });
    });
}