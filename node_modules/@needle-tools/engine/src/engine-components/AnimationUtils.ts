import { Object3D, PropertyBinding } from "three";
import type { GLTF } from "three/examples/jsm/loaders/GLTFLoader.js";

import { AnimationUtils } from "../engine/engine_animation.js";
import { addComponent, addNewComponent } from "../engine/engine_components.js";
import { ContextEvent, ContextRegistry } from "../engine/engine_context_registry.js";
import { Animation } from "./Animation.js";
import { Animator } from "./Animator.js";
import { GameObject } from "./Component.js";
import { PlayableDirector } from "./timeline/PlayableDirector.js";


const $objectAnimationKey = Symbol("objectIsAnimatedData");

/** Internal method - This marks an object as being animated. Make sure to always call isAnimated=false if you stop animating the object
 * @param obj The object to mark
 * @param isAnimated Whether the object is animated or not
 */
export function setObjectAnimated(obj: Object3D, animatedBy: object, isAnimated: boolean) {
    if (!obj) return;
    if (obj[$objectAnimationKey] === undefined) {
        if (!isAnimated) return;
        obj[$objectAnimationKey] = new Set<object>();
    }

    const set = obj[$objectAnimationKey] as Set<object>;
    if (isAnimated) {
        set.add(animatedBy);
    }
    else if (set.has(animatedBy))
        set.delete(animatedBy);
}

/** Get is the object is currently animated. Currently used by the Animator to check if a timeline animationtrack is actively animating an object */
export function getObjectAnimated(obj: Object3D): boolean {
    if (!obj) return false;
    const set = obj[$objectAnimationKey] as Set<object>;
    return set !== undefined && set.size > 0;
}



ContextRegistry.registerCallback(ContextEvent.ContextCreated, args => {
    const autoplay = args.context.domElement.getAttribute("autoplay");
    if (autoplay !== undefined && (autoplay === "" || autoplay === "true" || autoplay === "1")) {
        if (args.files) {
            for (const file of args.files) {
                const hasAnimation = GameObject.foreachComponent(file.file.scene, comp => {
                    if (comp.enabled === false) return undefined;
                    if (comp instanceof Animation && comp.playAutomatically || comp instanceof Animator || comp instanceof PlayableDirector && comp.playOnAwake === true) {
                        return true;
                    }
                    else if (comp instanceof Animation) {
                        comp.playAutomatically = true;
                        return true;
                    }
                    else if (comp instanceof PlayableDirector) {
                        comp.playOnAwake = true;
                        return true;
                    }
                    return undefined;
                }, true);
                if (hasAnimation !== true) {
                    AnimationUtils.assignAnimationsFromFile(file.file as GLTF, {
                        createAnimationComponent: (obj, _clip) => {
                            return addComponent(obj, Animation);
                        },
                    });
                }
            }
        }
    }
});


