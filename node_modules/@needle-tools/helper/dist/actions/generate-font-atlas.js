import generateBMFont from 'msdf-bmfont-xml';
import fs from 'fs';
import path from 'path';
// https://soimy.github.io/msdf-bmfont-xml/#module-usage-examples
export async function generateFontAtlas(fontPath, outputDir, charsetPath) {
    if (!fontPath || !fs.existsSync(fontPath)) {
        console.error("Missing font path. Please call this script with a path to a font file. Called with: \"" + fontPath + "\"");
        return false;
    }
    if (!outputDir || !fs.existsSync(outputDir)) {
        console.error("Missing output directory, please provide an output directory as the second argument. Called with: \"" + outputDir + "\"");
        return false;
    }
    let message = "Generate font texture " + fontPath + " to " + outputDir;
    let charset = null;
    if (charsetPath && fs.existsSync(charsetPath)) {
        message += " using chars from \"" + charsetPath + "\"";
        charset = fs.readFileSync(charsetPath, 'utf8');
        console.log("charset: ", charset);
        if (charset.length <= 0) {
            console.warn("WARN: Charset file is empty, using default charset");
            charset = null;
        }
    }
    console.log(message);
    const opts = {
        outputType: "json",
        fieldType: "msdf",
        textureSize: [4096, 4096],
        smartSize: true,
        // rtl: true, // use RTL(Arabic/Persian) charators fix,
        charset: undefined,
    };
    if (charset?.length)
        opts.charset = charset;
    else
        delete opts.charset;
    return new Promise((res, rej) => {
        generateBMFont(fontPath, opts, async (error, textures, font) => {
            if (error)
                return rej(error);
            const tasks = [];
            for (let i = 0; i < textures.length; i++) {
                const texture = textures[i];
                const directory = path.dirname(texture.filename);
                // remove the directory from the filename, we can not rely on path.parse because it fails if the filename contains a dot
                const fileName = texture.filename.substring(directory.length) + ".png";
                const outputPath = outputDir + "/" + fileName;
                console.log("Write to", outputPath);
                if (i > 0)
                    console.log("WARN: Multiple font textures generated but they will override each other. You have currently " + charset?.length + " characters configured. Maybe too many?");
                const t = fs.writeFile(outputPath, texture.texture, (err) => {
                    if (err)
                        rej(err);
                });
                tasks.push(t);
            }
            const fileName = path.parse(font.filename).name;
            const name = outputDir + "/" + fileName + "-msdf.json";
            const t = fs.writeFile(name, font.data, (err) => {
                if (err)
                    rej(err);
            });
            tasks.push(t);
            await Promise.all(tasks);
            res(true);
        });
    });
}
