import { FunctionValueGenerator, ValueGenerator } from './functions/ValueGenerator';
import { Behavior } from './behaviors/Behavior';
import { Particle } from './Particle';
import { MetaData, ParticleEmitter } from './ParticleEmitter';
import { EmitterShape, ShapeJSON } from './shape/EmitterShape';
import { BaseEvent, Blending, BufferGeometry, Layers, Material, Matrix4, Texture, Vector3 } from 'three';
import { ColorGenerator, FunctionColorGenerator, FunctionJSON, MemorizedFunctionColorGenerator } from './functions';
import { RenderMode } from './VFXBatch';
import { BatchedRenderer } from './BatchedRenderer';
import { RotationGenerator } from './functions/RotationGenerator';
export interface VFXBatchSettings {
    instancingGeometry: BufferGeometry;
    material: Material;
    uTileCount: number;
    vTileCount: number;
    renderMode: RenderMode;
    renderOrder: number;
    layers: Layers;
}
export interface BurstParameters {
    time: number;
    count: number;
    cycle: number;
    interval: number;
    probability: number;
}
export interface ParticleSystemParameters {
    autoDestroy?: boolean;
    looping?: boolean;
    prewarm?: boolean;
    duration?: number;
    shape?: EmitterShape;
    startLife?: ValueGenerator | FunctionValueGenerator;
    startSpeed?: ValueGenerator | FunctionValueGenerator;
    startRotation?: ValueGenerator | FunctionValueGenerator | RotationGenerator;
    startSize?: ValueGenerator | FunctionValueGenerator;
    startLength?: ValueGenerator | FunctionValueGenerator;
    startColor?: ColorGenerator | FunctionColorGenerator | MemorizedFunctionColorGenerator;
    emissionOverTime?: ValueGenerator | FunctionValueGenerator;
    emissionOverDistance?: ValueGenerator | FunctionValueGenerator;
    emissionBursts?: Array<BurstParameters>;
    onlyUsedByOther?: boolean;
    behaviors?: Array<Behavior>;
    instancingGeometry?: BufferGeometry;
    renderMode?: RenderMode;
    rendererEmitterSettings?: TrailSettings | MeshSettings | BillBoardSettings;
    speedFactor?: number;
    material: Material;
    layers?: Layers;
    startTileIndex?: ValueGenerator;
    uTileCount?: number;
    vTileCount?: number;
    renderOrder?: number;
    worldSpace?: boolean;
}
export interface ParticleSystemJSONParameters {
    version: string;
    autoDestroy: boolean;
    looping: boolean;
    prewarm: boolean;
    duration: number;
    shape: ShapeJSON;
    startLife: FunctionJSON;
    startSpeed: FunctionJSON;
    startRotation: FunctionJSON;
    startSize: FunctionJSON;
    startColor: FunctionJSON;
    emissionOverTime: FunctionJSON;
    emissionOverDistance: FunctionJSON;
    emissionBursts?: Array<BurstParameters>;
    onlyUsedByOther: boolean;
    rendererEmitterSettings: {
        startLength?: FunctionJSON;
        followLocalOrigin?: boolean;
    };
    instancingGeometry?: any;
    renderMode: number;
    renderOrder?: number;
    speedFactor?: number;
    texture?: string;
    material: string;
    layers?: number;
    startTileIndex: FunctionJSON | number;
    uTileCount: number;
    vTileCount: number;
    blending?: Blending;
    transparent?: boolean;
    behaviors: Array<any>;
    worldSpace: boolean;
}
export interface JsonMetaData {
    textures: {
        [uuid: string]: Texture;
    };
    geometries: {
        [uuid: string]: BufferGeometry;
    };
}
export interface BillBoardSettings {
}
export interface TrailSettings {
    startLength: ValueGenerator | FunctionValueGenerator;
    followLocalOrigin: boolean;
}
export interface MeshSettings {
    rotationAxis?: Vector3;
    startRotationX: ValueGenerator | FunctionValueGenerator;
    startRotationY: ValueGenerator | FunctionValueGenerator;
    startRotationZ: ValueGenerator | FunctionValueGenerator;
}
export interface EmissionState {
    burstIndex: number;
    burstWaveIndex: number;
    time: number;
    waitEmiting: number;
}
export interface SerializationOptions {
    useUrlForImage?: boolean;
}
export declare class ParticleSystem {
    autoDestroy: boolean;
    prewarm: boolean;
    looping: boolean;
    duration: number;
    startLife: ValueGenerator | FunctionValueGenerator;
    startSpeed: ValueGenerator | FunctionValueGenerator;
    startRotation: ValueGenerator | FunctionValueGenerator | RotationGenerator;
    startSize: ValueGenerator | FunctionValueGenerator;
    startColor: ColorGenerator | FunctionColorGenerator | MemorizedFunctionColorGenerator;
    startTileIndex: ValueGenerator;
    rendererEmitterSettings: TrailSettings | MeshSettings | BillBoardSettings;
    emissionOverTime: ValueGenerator | FunctionValueGenerator;
    emissionOverDistance: ValueGenerator | FunctionValueGenerator;
    emissionBursts: Array<BurstParameters>;
    onlyUsedByOther: boolean;
    worldSpace: boolean;
    speedFactor: number;
    particleNum: number;
    paused: boolean;
    particles: Array<Particle>;
    emitterShape: EmitterShape;
    emitter: ParticleEmitter<BaseEvent>;
    rendererSettings: VFXBatchSettings;
    neededToUpdateRender: boolean;
    behaviors: Array<Behavior>;
    private prewarmed;
    private emissionState;
    private emitEnded;
    private markForDestroy;
    private previousWorldPos?;
    private temp;
    private travelDistance;
    private normalMatrix;
    _renderer?: BatchedRenderer;
    set time(time: number);
    get time(): number;
    get layers(): Layers;
    get texture(): Texture;
    set texture(texture: Texture);
    get material(): Material;
    set material(material: Material);
    get uTileCount(): number;
    set uTileCount(u: number);
    get vTileCount(): number;
    set vTileCount(v: number);
    get instancingGeometry(): BufferGeometry;
    set instancingGeometry(geometry: BufferGeometry);
    get renderMode(): RenderMode;
    set renderMode(renderMode: RenderMode);
    get renderOrder(): number;
    set renderOrder(renderOrder: number);
    get blending(): Blending;
    set blending(blending: Blending);
    constructor(parameters: ParticleSystemParameters);
    pause(): void;
    play(): void;
    private spawn;
    endEmit(): void;
    dispose(): void;
    restart(): void;
    private update;
    emit(delta: number, emissionState: EmissionState, emitterMatrix: Matrix4): void;
    toJSON(meta: MetaData, options?: SerializationOptions): ParticleSystemJSONParameters;
    static fromJSON(json: ParticleSystemJSONParameters, meta: {
        textures: {
            [uuid: string]: Texture;
        };
        materials: {
            [uuoid: string]: Material;
        };
        geometries: {
            [uuid: string]: BufferGeometry;
        };
    }, dependencies: {
        [uuid: string]: Behavior;
    }): ParticleSystem;
    addBehavior(behavior: Behavior): void;
    getRendererSettings(): VFXBatchSettings;
    clone(): ParticleSystem;
}
