import { Vector4 } from 'three';
import { FunctionJSON } from './FunctionJSON';
import { RandomColor } from './RandomColor';
import { ColorRange } from './ColorRange';
import { Gradient } from './Gradient';
import { RandomColorBetweenGradient } from './RandomColorBetweenGradient';
export interface ColorGenerator {
    type: 'value';
    genColor(color: Vector4): Vector4;
    toJSON(): FunctionJSON;
    clone(): ColorGenerator;
}
export interface FunctionColorGenerator {
    type: 'function';
    genColor(color: Vector4, t: number): Vector4;
    toJSON(): FunctionJSON;
    clone(): FunctionColorGenerator;
}
export interface MemorizedFunctionColorGenerator {
    type: 'memorizedFunction';
    startGen(memory: any): void;
    genColor(color: Vector4, t: number, memory: any): Vector4;
    toJSON(): FunctionJSON;
    clone(): MemorizedFunctionColorGenerator;
}
export declare class ConstantColor implements ColorGenerator {
    color: Vector4;
    constructor(color: Vector4);
    genColor(color: Vector4): Vector4;
    type: 'value';
    toJSON(): FunctionJSON;
    static fromJSON(json: FunctionJSON): ConstantColor;
    clone(): ColorGenerator;
}
export declare function ColorGeneratorFromJSON(json: FunctionJSON): RandomColor | ColorRange | Gradient | RandomColorBetweenGradient | ConstantColor;
