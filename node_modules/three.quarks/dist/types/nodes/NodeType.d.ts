import { NodeValueType } from './NodeValueType';
import { NodeGraph } from './NodeGraph';
import { Particle } from '../Particle';
import { Vector2, Vector3, Vector4 } from 'three';
import { NodeData } from './Node';
export interface ExecutionContext {
    inputs: NodeValue[];
    outputs: NodeValue[];
    particle?: Particle;
    delta?: number;
}
type NodeValue = number | boolean | Vector2 | Vector3 | Vector4;
type NodeExecFunction = (context: ExecutionContext, data: NodeData, inputs: NodeValue[], outputs: NodeValue[]) => void;
export interface NodeTypeSignature {
    inputTypes: NodeValueType[];
    outputTypes: NodeValueType[];
    func: NodeExecFunction;
}
export declare class NodeType {
    name: string;
    nodeTypeSignatures: NodeTypeSignature[];
    constructor(name: string);
    addSignature(inputTypes: NodeValueType[], outputTypes: NodeValueType[], func: NodeExecFunction): void;
}
export declare class GraphNodeType extends NodeType {
    nodeGraph: NodeGraph;
    constructor(nodeGraph: NodeGraph);
}
export {};
